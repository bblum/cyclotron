'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var wait = require('./wait');

/** animate any numeric parameter of an object or array of objects */

var to = function (_wait) {
    _inherits(to, _wait);

    /**
     * @private
     * @param {object} object to animate
     * @param {object} goto - parameters to animate, e.g.: {alpha: 5, scale: {3, 5}, scale: 5, rotation: Math.PI}
     * @param {number} duration - time to run
     * @param {object} [options]
     * @param {number} [options.wait=0] n milliseconds before starting animation (can also be used to pause animation for a length of time)
     * @param {boolean} [options.pause] start the animation paused
     * @param {boolean|number} [options.repeat] true: repeat animation forever n: repeat animation n times
     * @param {boolean|number} [options.reverse] true: reverse animation (if combined with repeat, then pulse) n: reverse animation n times
     * @param {Function} [options.load] loads an animation using an .save() object note the * parameters below cannot be loaded and must be re-set
     * @param {string|Function} [options.ease] name or function from easing.js (see http://easings.net for examples)
     * @emits to:done animation expires
     * @emits to:wait each update during a wait
     * @emits to:first first update when animation starts
     * @emits to:each each update while animation is running
     * @emits to:loop when animation is repeated
     * @emits to:reverse when animation is reversed
     */
    function to(object, goto, duration, options) {
        _classCallCheck(this, to);

        options = options || {};

        var _this = _possibleConstructorReturn(this, (to.__proto__ || Object.getPrototypeOf(to)).call(this, object, options));

        _this.type = 'To';
        if (Array.isArray(object)) {
            _this.list = object;
            _this.object = _this.list[0];
        }
        if (options.load) {
            _this.load(options.load);
        } else {
            _this.goto = goto;
            _this.fixScale();
            _this.duration = duration;
            _this.restart();
        }
        return _this;
    }

    /**
     * converts scale from { scale: n } to { scale: { x: n, y: n }}
     * @private
     */


    _createClass(to, [{
        key: 'fixScale',
        value: function fixScale() {
            if (typeof this.goto['scale'] !== 'undefined' && !Number.isNaN(this.goto['scale'])) {
                this.goto['scale'] = { x: this.goto['scale'], y: this.goto['scale'] };
            }
        }
    }, {
        key: 'save',
        value: function save() {
            var save = _get(to.prototype.__proto__ || Object.getPrototypeOf(to.prototype), 'save', this).call(this);
            save.goto = this.goto;
            save.start = this.start;
            save.delta = this.delta;
            save.keys = this.keys;
            return save;
        }
    }, {
        key: 'load',
        value: function load(_load) {
            _get(to.prototype.__proto__ || Object.getPrototypeOf(to.prototype), 'load', this).call(this, _load);
            this.goto = _load.goto;
            this.start = _load.start;
            this.delta = _load.delta;
            this.keys = _load.keys;
        }
    }, {
        key: 'restart',
        value: function restart() {
            var i = 0;
            var start = this.start = [];
            var delta = this.delta = [];
            var keys = this.keys = [];
            var goto = this.goto;
            var object = this.object;

            // loops through all keys in goto object
            for (var key in goto) {

                // handles keys with one additional level e.g.: goto = {scale: {x: 5, y: 3}}
                if (isNaN(goto[key])) {
                    keys[i] = { key: key, children: [] };
                    start[i] = [];
                    delta[i] = [];
                    var j = 0;
                    for (var key2 in goto[key]) {
                        keys[i].children[j] = key2;
                        start[i][j] = parseFloat(object[key][key2]);
                        start[i][j] = this._correctDOM(key2, start[i][j]);
                        start[i][j] = isNaN(this.start[i][j]) ? 0 : start[i][j];
                        delta[i][j] = goto[key][key2] - start[i][j];
                        j++;
                    }
                } else {
                    start[i] = parseFloat(object[key]);
                    start[i] = this._correctDOM(key, start[i]);
                    start[i] = isNaN(this.start[i]) ? 0 : start[i];
                    delta[i] = goto[key] - start[i];
                    keys[i] = key;
                }
                i++;
            }
            this.time = 0;
        }
    }, {
        key: 'reverse',
        value: function reverse() {
            var object = this.object;
            var keys = this.keys;
            var goto = this.goto;
            var delta = this.delta;
            var start = this.start;

            for (var i = 0, _i = keys.length; i < _i; i++) {
                var key = keys[i];
                if (isNaN(goto[key])) {
                    for (var j = 0, _j = key.children.length; j < _j; j++) {
                        delta[i][j] = -delta[i][j];
                        start[i][j] = parseFloat(object[key.key][key.children[j]]);
                        start[i][j] = isNaN(start[i][j]) ? 0 : start[i][j];
                    }
                } else {
                    delta[i] = -delta[i];
                    start[i] = parseFloat(object[key]);
                    start[i] = isNaN(start[i]) ? 0 : start[i];
                }
            }
        }
    }, {
        key: 'calculate',
        value: function calculate() /*elapsed*/{
            var object = this.object;
            var list = this.list;
            var keys = this.keys;
            var goto = this.goto;
            var time = this.time;
            var start = this.start;
            var delta = this.delta;
            var duration = this.duration;
            var ease = this.options.ease;
            for (var i = 0, _i = this.keys.length; i < _i; i++) {
                var key = keys[i];
                if (isNaN(goto[key])) {
                    var key1 = key.key;
                    for (var j = 0, _j = key.children.length; j < _j; j++) {
                        var key2 = key.children[j];
                        var others = object[key1][key2] = time >= duration ? start[i][j] + delta[i][j] : ease(time, start[i][j], delta[i][j], duration);
                        if (list) {
                            for (var k = 1, _k = list.length; k < _k; k++) {
                                list[k][key1][key2] = others;
                            }
                        }
                    }
                } else {
                    var _key = keys[i];
                    var _others = object[_key] = time >= duration ? start[i] + delta[i] : ease(time, start[i], delta[i], duration);
                    if (list) {
                        for (var _j2 = 1, _j3 = this.list.length; _j2 < _j3; _j2++) {
                            list[_j2][_key] = _others;
                        }
                    }
                }
            }
        }
    }]);

    return to;
}(wait);

module.exports = to;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,